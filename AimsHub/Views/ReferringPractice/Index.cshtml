@model ReferringPracticeIndexViewModel
@using AimsHub.Models;
@using AimsHub.ViewModels
@using GridMvc.Html

@{
    ViewBag.Title = "Referring Practice Manager";
    int totalHosp = Model.HospitalList.Count();
    int totalRefPhy = Model.RefPhyList.Count();
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#PopupHospitals").dialog({
            autoOpen: false,
            resizable: true,
            draggable: true,
            title: "Select Hospitals",
            height: 'auto',
            width: 'auto',
            modal: true,
            position: { my: "top", at: "bottom", of: $('#txtHospitals') }
        });

        $("#PopupRefPhy").dialog({
            autoOpen: false,
            resizable: true,
            draggable: true,
            title: "Select PCPs",
            height: 'auto',
            width: 'auto',
            modal: true,
            position: { my: "top", at: "bottom", of: $('#txtRefPhy') }
        });

        $('#CreatePopupButton').click(function () {
            $('#CreatePopup').load('@Url.Action("Create", "ReferringPractice")', function () {
                $(this).dialog({
                    modal: true,
                    height: 'auto',
                    width: 'auto',
                    title: 'Create New Practice',
                    position: { my: "top", at: "top", of: $('#labelHeader') }
                });
            });
        });

        $('.btn-danger').click(function (e) {
            e.preventDefault();
            var destination = $(this).attr("href");
            $('#CreatePopup').load(destination, function () {
                $(this).dialog({
                    modal: true,
                    height: 'auto',
                    width: 'auto',
                    title: 'Delete This Practice',
                    position: { my: "top", at: "top", of: $('[data-gridname="practiceGrid"]') }
                });
            });
        });

        var array = @Html.Raw(Json.Encode(Model.SelectedHospitals));
        var max = 0;
        for (i = 0; i < array.length; i++)
        {
            $('.hospcheck').each(function () {
                if (array[i] == $(this).val())
                {
                    $(this).prop('checked', true);
                    max++;
                }
            });
        }

        var hospmax = @totalHosp; //Literally did this because if I put it in the if statement VS thinks the syntax is wrong and I hate red squigglies
        if (max == hospmax || max == 0) {
            $('#chkhospAll').prop('checked', true);
        }

        checkboxHiddenUpdate($('#hidHospitals'), 'hospcheck');

        var array = @Html.Raw(Json.Encode(Model.SelectedRefPhy));
        var max = 0;
        for (i = 0; i < array.length; i++)
        {
            $('.refphycheck').each(function () {
                if (array[i] == $(this).val())
                {
                    $(this).prop('checked', true);
                    max++;
                }
            });
        }

        var refphymax = @totalRefPhy; //Literally did this because if I put it in the if statement VS thinks the syntax is wrong and I hate red squigglies
        if (max == refphymax || max == 0) {
            $('#chkrefphyAll').prop('checked', true);
        }

        checkboxHiddenUpdate($('#hidRefPhy'), 'refphycheck');

    });
    function checkboxHiddenUpdate(hid, className) {
        var data = [];
        $('.' + className).each(function () {
            if (this.checked) {
                data.push(this.value);
            }
        });
        hid.val(data);
    }
    function toggleHosp(chk) {
        if (chk.checked) {
            var hosp = [];
            $('.hospcheck').each(function () {
                //this.checked = chk.checked;
                this.checked = '';
                hosp.push(this.value);
            });
            //checkboxHiddenUpdate($('#hidHospitals'), 'hospcheck'); //This is removed because otherwise all hospitals are submitted to the server and the query unnecessarily performs filtering
            $('hidHospitals').val("");
        }
        else {
            $('.hospcheck').each(function () {
                this.checked = chk.checked;
            });
            checkboxHiddenUpdate($('#hidHospitals'), 'hospcheck');
        }
    }
    function selectHosp() {
        checkboxHiddenUpdate($('#hidHospitals'), 'hospcheck');
        $('#chkhospAll').prop('checked', false);
    }
    function toggleRefPhy(chk) {
        if (chk.checked) {
            var refphy = [];
            $('.refphycheck').each(function () {
                //this.checked = chk.checked;
                this.checked = '';
                refphy.push(this.value);
            });
            //checkboxHiddenUpdate($('#hidHospitals'), 'hospcheck'); //This is removed because otherwise all hospitals are submitted to the server and the query unnecessarily performs filtering
            $('hidRefPhy').val("");
        }
        else {
            $('.refphycheck').each(function () {
                this.checked = chk.checked;
            });
            checkboxHiddenUpdate($('#hidRefPhy'), 'refphycheck');
        }
    }
    function selectRefPhy() {
        checkboxHiddenUpdate($('#hidRefPhy'), 'refphycheck');
        $('#chkrefphyAll').prop('checked', false);
    }
    function hideHospitals() {
        $('#PopupHospitals').dialog('close');
    }
    function showHospitals() {
        $('#PopupHospitals').dialog('open');
    }
    function hideRefPhy() {
        $('#PopupRefPhy').dialog('close');
    }
    function showRefPhy() {
        $('#PopupRefPhy').dialog('open');
    }
</script>

<script src="~/Scripts/gridmvc.js"></script>
<link href="~/Content/Gridmvc.css" rel="stylesheet" />

<div class="AIMSBanner">
    Referring Practice Manager
</div>

@using (Html.BeginForm("Index", "ReferringPractice", FormMethod.Post))
{
    <div id="CreatePopup"></div>
    <span class="form-inline col-lg-12" style="margin-top: 5px;">
        <span class="col-lg-1">
            <a class="btn btn-primary btn-sm" id="CreatePopupButton">
                <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>
                <span>Create New</span>
            </a>
        </span>
        <span class="col-lg-3" style="margin-left: 20px;">
            <label>Name: </label><span class="form-group"><input type="text" class="form-control" id="filterPracticeName" name="filterPracticeName" value="@Model.filterPracticeName" /></span>
        </span>
        <span class="col-lg-3">
            <label>Address 1: </label><span class="form-group">
                <input type="text" class="form-control" id="filterAddressLine1" name="filterAddressLine1" value="@Model.filterAddressLine1" />
            </span>
        </span>
        <span class="col-lg-2">
            <label>Fax: </label><span class="form-group">
                <input type="text" class="form-control" id="filterFax" name="filterFax" value="@Model.filterFax" />
            </span>
        </span>
    </span>
    <span class="col-lg-12">
        <span class="col-lg-3">
            <label>City: </label><span class="form-group">
                                     <input type="text" class="form-control" id="filterCity" name="filterCity" value="@Model.filterCity" />
            </span>
        </span>
        <span class="col-lg-3">
            <label>Hospital: </label><span class="form-group">
                <input type="text" id="txtHospitals" class="form-control" onclick="javascript:showHospitals()" />
            </span>
        </span>
        <span class="col-lg-3">
            <label>Ref Physicians: </label><span class="form-group">
                <input type="text" id="txtRefPhy" class="form-control" onclick="javascript:showRefPhy()" />
            </span>
        </span>
        <span class="col-lg-3">
            <button name="submit" type="submit" class="btn btn-success btn-sm" value="Search" style="float: right;">
                Search <i class="glyphicon glyphicon-arrow-right"></i>
            </button>
        </span>
    </span>

    <input type="hidden" id="hidRefPhy" name="hidRefPhy" value="@Html.Raw(Json.Encode(Model.SelectedRefPhy))" />
    <input type="hidden" id="hidHospitals" name="hidHospitals" value="@Html.Raw(Json.Encode(Model.SelectedHospitals))" />
}

    <div id="PopupHospitals" style="display: none;">
        <span class="col-sm-12" style="height: 250px; overflow-y: auto;">
            <input type="checkbox" value="ALL" id="chkhospAll" onclick="javascript:toggleHosp(this)" /><strong>ALL</strong><br />
            @{foreach (SelectListItem hosp in Model.HospitalList)
                {
                    <input type="checkbox" class="hospcheck" onclick="javascript:selectHosp()" value="@hosp.Value" />@hosp.Text <br />
                }
            }
        </span>
        <span class="col-sm-12">
            <span class="col-sm-6">

            </span>
            <span class="col-sm-6">
                <button type="button" id="CloseHospitals" onclick="javascript:hideHospitals()">Close Popup</button>
            </span>
        </span>
    </div>

    <div id="PopupRefPhy" style="display: none;">
        <span class="col-sm-12" style="height: 250px; overflow-y: auto;">
            <input type="checkbox" value="ALL" id="chkhrefphyAll" onclick="javascript:toggleRefPhy(this)" /><strong>ALL</strong><br />
            @{foreach (SelectListItem refphy in Model.RefPhyList)
                {
                    <input type="checkbox" class="refphycheck" onclick="javascript:selectRefPhy()" value="@refphy.Value" />@refphy.Text <br />
                }
            }
        </span>
        <span class="col-sm-12">
            <span class="col-sm-6">

            </span>
            <span class="col-sm-6">
                <button type="button" id="CloseRefPhy" onclick="javascript:hideRefPhy()">Close Popup</button>
            </span>
        </span>
    </div>
                

<div style="width:100%;">
    @Html.Grid(Model.ReferringPractices).Columns(columns =>
{
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(110)
    .Titled("Actions")
    .RenderValueAs(c => @Html.Partial("_TableButtonsPartial", new SmallButtonModel { Id = c.PracID }));
    columns.Add(c => c.PracID, true).Titled("ID");
    columns.Add(c => c.PracName).Titled("Name").Sortable(true);
    columns.Add(c => c.Address1, true).Titled("Address 1").Sortable(true);
    columns.Add(c => c.Address2).Titled("Address 2").Sortable(true);
    columns.Add(c => c.Address3).Titled("Address 3").Filterable(true).Sortable(true);
    columns.Add(c => c.City).Titled("City").Sortable(true);
    columns.Add(c => c.FaxNotification).Titled("Fax").Sortable(true);
    columns.Add(c => c.EmailNotification).Titled("Email").Sortable(true);
    columns.Add(c => c.Email).Titled("Email Address");
}).Selectable(false).Named("practiceGrid")
</div>

